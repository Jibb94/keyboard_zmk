#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define DEFAULT 0
#define LOWER 1

#define QUESTION_MARK LS(SLASH)
#define EXCLAMATION_MARK LS(N1)
#define PIPE LS(BSLH)
#define TILDE LS(GRAVE)

/ {
    behaviors {
        td_punct: td_punct {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DOT>, <&kp COMMA>, <&kp QUESTION_MARK>, <&kp EXCLAMATION_MARK>;
            // 1 tap: . (period)
            // 2 taps: , (comma)
            // 3 taps: ? (question mark, Shift + /)
            // 4 taps: ! (exclamation mark, Shift + 1)
        };
        td_quote: td_quote {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SQT>, <&kp DQT>, <&kp COLON>, <&kp SEMI>;
            // 1 tap: ' (single quote)
            // 2 taps: " (double quote)
            // 3 taps: : (colon)
            // 4 taps: ; (semicolon)
        };
        td_slash: td_slash {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SLASH>, <&kp BSLH>, <&kp PIPE>, <&kp TILDE>;
            // 1 tap: / (slash)
            // 2 taps: \ (backslash)
            // 3 taps: | (pipe, Shift + \)
            // 4 taps: ~ (tilde, Shift + grave)
        };

        combos {
            compatible = "zmk,combos";

            combo_shift {
                timeout-ms = <30>;
                key-positions = <19 29>;
                bindings = <&kp LSHIFT>;
            };

            combo_space_np {
                timeout-ms = <30>;
                key-positions = <25 9>;
                bindings = <&kp SPACE>;
            };
            combo_space_nm {
                timeout-ms = <30>;
                key-positions = <25 26>;
                bindings = <&kp SPACE>;
            };
            combo_space_bn {
                timeout-ms = <30>;
                key-positions = <24 25>;
                bindings = <&kp SPACE>;
            };
            combo_space_vb {
                timeout-ms = <30>;
                key-positions = <23 24>;
                bindings = <&kp SPACE>;
            };
        };
    };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            // --------------------------------------------------------------------------------------------------------------------------------------------------------------------
            // |   ESC   |    Q    |    W    |    E    |    R    |    T    |                                          |    Y    |    U    |    I    |    O    |    P    |    \    |
            // |   TAB   |    A    |    S    |    D    |    F    |    G    |                                          |    H    |    J    |    K    |    L    |    ;    |    '    |
            // |  SHIFT  |    Z    |    X    |    C    |    V    |    B    | CTRL+A  | CTRL+C  |  |  CTRL+V |  CTRL+X |    N    |    M    |    ,    |    .    |    /    |  R CTRL |
            //                               |   GUI   |   DEL   | RETURN  |  SPACE  | ESCAPE  |  |  RETURN |  SPACE  |   TAB   |   BSPC  |  R ALT  |

            bindings = <
&kp  Q	&kp  W	&kp  E	&kp  R	&kp  T	&kp  Y	&kp  U	&kp  I	&kp  O	&kp  P
&kp  A	&kp  S	&kp  D	&kp  F	&kp  G	&kp  H	&kp  J	&kp  K	&kp  L	&kp BSPC 
&kp  Z	&kp  X	&kp  C	&kp  V	&kp  B	&kp  N	&kp  M	&mo LOWER	    &td_quote	    &td_punct
            >;
        };

        lower_layer {
            bindings = <
&kp  N1	        &kp  N2	        &kp  N3	        &kp  N4	        &kp  N5		&kp  N6		&kp  N7	    &kp  N8	    &kp  N9	        &kp  N0
&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	    &td_slash	    &kp  MINUS	&kp LEFT    &kp DOWN	&kp UP		&kp RIGHT	    &kp ENTER 
&kp LG(Z)	    &kp LS(LG(Z))	&kp LG(C)	    &kp LG(V)	    &kp  EQUAL	&kp  LBKT   &kp  RBKT	&none		&kp ESC		    &kp TAB
            >;
        };
    };
};
